package com.example.user.guessthenumber;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import java.util.Random;

public class MainActivity extends AppCompatActivity {
    //These are used in the game screen to provide info to the player
    TextView Score;
    TextView Explain;
    TextView Lost_Won;
    /*These buttons are used in the game screen to check the number guessed and to take them
    to the main menu. The ExitB button is used in both the score screen and the lose/win screen*/
    Button ExitB;
    Button GuessB;
    /*The layouts are divided into the Menu screen with the "Play, "How to play(HTP)", "Easy", and
    "Difficult" buttons. The HTP button will take them to the HTP screen where the game is
    explained to them. The play button will take them to the game screen.*/
    RelativeLayout HTPScreen;
    RelativeLayout MenuScreen;
    RelativeLayout GameScreen;
    //Used to show the user the difficulty set in the menu screen
    TextView Diff;
    //Allows to input the number they would like to guess
    EditText Input;
    /*S is used to keep track of the score. High and low keep track of the maximum and minimum
    values that need to be entered and are set to the easy difficulty by default.*/
    int S = 8;
    int low = 1;
    int high = 20;
    //Rand is used to generate a random number and Num is the variable used to store that number.
    Random Rand;
    int Num;
    //The boolean is used to know the difficulty picked and is easy by default
    Boolean Easy = Boolean.TRUE;

    public void Menu(View view) {
        int tagValue = Integer.parseInt(view.getTag().toString());
        if (tagValue == 2) {
            //How to play button is pressed
            HTPScreen.setVisibility(View.VISIBLE);
            MenuScreen.setVisibility(View.INVISIBLE);
            GameScreen.setVisibility(View.INVISIBLE);
        } else if (tagValue == 3) {
            //Easy button is pressed
            Easy = Boolean.TRUE;
            Diff.setText("Difficulty : Easy");
            Explain.setText("Guess a number between 1 and 20");
            low = 1;
            high = 20;
        } else if (tagValue == 4) {
            //Hard button is pressed
            Easy = Boolean.FALSE;
            Diff.setText("Difficulty : Hard");
            Explain.setText("Guess a number between 4 and 59");
            low = 4;
            high = 59;
        }
    }

    public void Exit(View view) {
        int tagValue = Integer.parseInt(view.getTag().toString());
        if (tagValue == 6) {
            //Exit from Game Screen
            MenuScreen.setVisibility(View.VISIBLE);
            GameScreen.setVisibility(View.INVISIBLE);
            Lost_Won.setVisibility(View.INVISIBLE);
            Score.setVisibility(View.VISIBLE);
            Input.setVisibility(View.VISIBLE);
            Explain.setVisibility(View.VISIBLE);
            GuessB.setVisibility(View.VISIBLE);
        } else if (tagValue == 7) {
            //Exit from How To Play Screen
            MenuScreen.setVisibility(View.VISIBLE);
            HTPScreen.setVisibility(View.INVISIBLE);
        }

    }

    public void Play(View view) {
        //We (re)set the counter to 8 when they enter the game
        S = 8;
        Input.setText("");
        Score.setText("Score : " + S);
        GameScreen.setVisibility(View.VISIBLE);
        MenuScreen.setVisibility(View.INVISIBLE);
        if (Easy == Boolean.TRUE) {
            //If the difficulty is set to easy we generate a number between 1 and 20
            Rand = new Random();
            Num = Rand.nextInt(20 - 1 + 1) + 1;
            Log.i("Play", "Easy number generated");
        } else {
            //if the difficulty is set to hard we generate a number between 4 and 59
            Rand = new Random();
            Num = Rand.nextInt(59 - 4 + 1) + 4;
            Log.i("Play", "Hard number generated");
        }

    }

    public void Guess(View view) {
        //We check to see if the input is empty so the app doesn't crash if it is
        if (!Input.getText().toString().isEmpty()) {
            int G = Integer.parseInt(Input.getText().toString());
            if (G < low || G > high) {
                //If they enter a number outside our bounds we inform them
                Toast.makeText(this, "Out of bounds", Toast.LENGTH_SHORT).show();
            }else {
                if (G == Num) {
                    Input.setText("");
                    //If the right answer is chosen
                    if (Easy == Boolean.TRUE) {
                        //If its easy we add 3 points and generate a new number
                        S = S + 3;
                        Score.setText("Score : " + S);
                        Num = Rand.nextInt(20 - 1 + 1) + 1;
                        Log.i("Guess Right", "Points added, new easy number generated");
                    } else {
                        //If its hard we add 6 points and generate a new number
                        S = S + 6;
                        Score.setText("Score : " + S);
                        Num = Rand.nextInt(59 - 4 + 1) + 4;
                        Log.i("Guess Right", "Points added, new hard number generated");
                    }
                } else if (G > Num) {
                    Input.setText("");
                    S = S - 1;
                    Score.setText("Score : " + S);
                    Toast.makeText(this, "Go Lower", Toast.LENGTH_LONG).show();
                    Log.i("Guess Wrong", "Point deducted");
                } else {
                    Input.setText("");
                    S = S - 1;
                    Score.setText("Score : " + S);
                    Toast.makeText(this, "Go Higher", Toast.LENGTH_LONG).show();
                    Log.i("Guess Wrong", "Point deducted");
                }
               /*If they reach 0 or 20 they will be sent to a "screen" ,
                    but in fact we just set the visibility of a textview to visible to show that
                    and used the same exit button as before*/
                if (S <= 0) {

                    Lost_Won.setText("You Lost");
                    Lost_Won.setVisibility(View.VISIBLE);
                    Score.setVisibility(View.INVISIBLE);
                    Input.setVisibility(View.INVISIBLE);
                    Explain.setVisibility(View.INVISIBLE);
                    GuessB.setVisibility(View.INVISIBLE);
                    Log.i("Lost", "Less or equal to 0");
                } else if (S >= 20) {
                    Lost_Won.setText("You Won!!");
                    Lost_Won.setVisibility(View.VISIBLE);
                    Score.setVisibility(View.INVISIBLE);
                    Input.setVisibility(View.INVISIBLE);
                    Explain.setVisibility(View.INVISIBLE);
                    GuessB.setVisibility(View.INVISIBLE);
                    Log.i("Win", "More or equal to 20");
                }
            }
        }else {
            Toast.makeText(this, "Please enter a number", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Score = (TextView) findViewById(R.id.Score);
        Explain = (TextView)findViewById(R.id.Explain);
        HTPScreen = (RelativeLayout) findViewById(R.id.HTPScreen);
        MenuScreen = (RelativeLayout) findViewById(R.id.MenuScreen);
        GameScreen = (RelativeLayout) findViewById(R.id.GameScreen);
        ExitB = (Button)findViewById(R.id.ExitB2);
        GuessB = (Button)findViewById(R.id.GuessB);
        Diff = (TextView)findViewById(R.id.Diff);
        Input = (EditText) findViewById(R.id.Input);
        Lost_Won = (TextView) findViewById(R.id.Lose_Win);
        HTPScreen.setVisibility(View.INVISIBLE);
        GameScreen.setVisibility(View.INVISIBLE);
        Lost_Won.setVisibility(View.INVISIBLE);
        Log.i("Startup", "Startup Successful");
    }
}